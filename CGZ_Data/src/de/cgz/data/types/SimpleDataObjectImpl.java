package de.cgz.data.types;

public class SimpleDataObjectImpl<T> extends AbstractDataObject implements SimpleDataObject<T> {

	private T value;
	private final Class<T> type;

	public SimpleDataObjectImpl(Class<T> type) {
		this.type = type;
	}

	@SuppressWarnings("unchecked")
	public SimpleDataObjectImpl(T value) {
		this((Class<T>) value.getClass());
		this.setValue(value);
	}

	public boolean isEmpty() {
		return getValue() != null;
	}

	public T getValue() {
		return value;
	}



	@Override
	public boolean equals(Object obj) {
		if (obj == null) return false;
		if (!(obj instanceof SimpleDataObject)) return false;

		@SuppressWarnings("unchecked") SimpleDataObject<T> sdo = (SimpleDataObject<T>) obj;
		if (this.isEmpty() && sdo.isEmpty()) return true;
		if (this.isEmpty() || sdo.isEmpty()) return false;
		return this.getValue().equals(sdo.getValue());
	}
	
	@Override
	public int hashCode() {
		//autogenerated
		
		final int prime = 31;
		int result = 1;
		result = prime * result + ((value == null) ? 0 : value.hashCode());
		return result;
	}
	
	public Class<T> getType() {
		return type;
	}
	
	protected void setValue(T value) {
		this.value = value;
	}

}
